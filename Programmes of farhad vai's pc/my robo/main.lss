
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000010a  00000000  00000000  0000010b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000aa  00000000  00000000  00000215  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000012f  00000000  00000000  000002bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c2  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  000004d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000004fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	21 c0       	rjmp	.+66     	; 0x78 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:

int main(void)

{
	int i;
	DDRD |= (1 << DDD0) | (1 << DDD1) | (1 << DDD2) | (1 << DDD3) | (1 << DDD4) | (1 << DDD5) | (1 << DDD6);
  38:	81 b3       	in	r24, 0x11	; 17
  3a:	8f 67       	ori	r24, 0x7F	; 127
  3c:	81 bb       	out	0x11, r24	; 17
	DDRC |= (1 << DDC0) | (1 << DDC1) | (1 << DDC2) | (1 << DDC3) | (1 << DDC4) | (1 << DDC5) | (1 << DDC6);
  3e:	84 b3       	in	r24, 0x14	; 20
  40:	8f 67       	ori	r24, 0x7F	; 127
  42:	84 bb       	out	0x14, r24	; 20
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	30 e0       	ldi	r19, 0x00	; 0
	
	{
		for (i=0;i<6;i++)
		
		{
			PORTD = (1 << i);
  48:	61 e0       	ldi	r22, 0x01	; 1
  4a:	70 e0       	ldi	r23, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  4c:	40 e2       	ldi	r20, 0x20	; 32
  4e:	5e e4       	ldi	r21, 0x4E	; 78
  50:	cb 01       	movw	r24, r22
  52:	02 2e       	mov	r0, r18
  54:	02 c0       	rjmp	.+4      	; 0x5a <__SREG__+0x1b>
  56:	88 0f       	add	r24, r24
  58:	99 1f       	adc	r25, r25
  5a:	0a 94       	dec	r0
  5c:	e2 f7       	brpl	.-8      	; 0x56 <__SREG__+0x17>
  5e:	82 bb       	out	0x12, r24	; 18
			
			
			
			PORTC = (1 << i);
  60:	85 bb       	out	0x15, r24	; 21
  62:	ca 01       	movw	r24, r20
  64:	01 97       	sbiw	r24, 0x01	; 1
  66:	f1 f7       	brne	.-4      	; 0x64 <__SREG__+0x25>
	DDRC |= (1 << DDC0) | (1 << DDC1) | (1 << DDC2) | (1 << DDC3) | (1 << DDC4) | (1 << DDC5) | (1 << DDC6);
	
	while(1)
	
	{
		for (i=0;i<6;i++)
  68:	2f 5f       	subi	r18, 0xFF	; 255
  6a:	3f 4f       	sbci	r19, 0xFF	; 255
  6c:	26 30       	cpi	r18, 0x06	; 6
  6e:	31 05       	cpc	r19, r1
  70:	7c f3       	brlt	.-34     	; 0x50 <__SREG__+0x11>
  72:	20 e0       	ldi	r18, 0x00	; 0
  74:	30 e0       	ldi	r19, 0x00	; 0
  76:	ec cf       	rjmp	.-40     	; 0x50 <__SREG__+0x11>

00000078 <_exit>:
  78:	f8 94       	cli

0000007a <__stop_program>:
  7a:	ff cf       	rjmp	.-2      	; 0x7a <__stop_program>
